// Test code coverage Results: 

Unittest1 (updateCoins): 
	Lines executed:100.00% of 30, indicates no bugs found

Unittest2 (isGameOver): 
	Lines executed:100.00% of 32, indicates no bugs found

Unittest3 (drawCard): 
	Lines executed:100.00% of 23, indicates no bugs found

Unittest4 (numHandCards): 
	Lines executed:100.00% of 17, indicates no bugs found

cardtest1 (smithy): 
	Lines executed:100.00% of 20, indicates no bugs found

cardtest2 (adventurer): 
	Lines executed:90.48% of 21, , indicates program exited before 100% completed, and the bug may appear in line 21.

cardtest3 (great_hall): 
	Lines executed:100.00% of 18, indicates no bugs found

cardtest4 (steward):
	Lines executed:100.00% of 30, indicates no bugs found



// My unit test effort 

In order to test the function correctly, I design two main asserttrue function for helping me to detect any bugs/error. One of the function can detect any error output inside the function/program, such as returning -1, or crashing; the other function works as comparing two input, that helps me to check if the function ouput is correct as expected.

For implementation, first I generated random inputs/numbers for initializeGame(...) in order to avoiding exception, and everytime initializeGame(...) is called will be checked by my asserttrue function. 

Second, for testing functions, I generated different possible inputs/situations depends on the particular function. Since I knew how the functions work and their outputs, I use my asserttrue function to compare the output with my expected answers.

Third, for testing the card functions, I did essentially the same things as function tests, but I also checked the game state after the card fucntion is called, see whether all the data of the state after calling the function would be satisfied with the expected correct output.  
