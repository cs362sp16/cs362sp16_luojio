        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "../dominion.c"
        -:    2:#include "../rngs.c"
        -:    3:#include "../myassert.h"
        -:    4:
        -:    5:/*************************************
        -:    6:Test for "adventurer" card
        -:    7:*************************************/
        -:    8:
        1:    9:int main(){
        -:   10:
        -:   11://	Test Initialization
        -:   12:	int i, temp1, temp2, temp3, temp4;
        1:   13:	srand (time(NULL));
        -:   14:	struct gameState game;
        1:   15:	int cards[10] = {estate, duchy, adventurer, embargo, sea_hag, feast, gardens, mine, tribute, outpost}; 
        1:   16:	int playerNum = 4;
        -:   17:	
        -:   18:
        -:   19:// Random settings
        1:   20:	int ramdomSeed = rand() % 99999 + 1;	
        1:   21:	int bonus = rand() % 10;
        1:   22:	int handNum = rand() % MAX_HAND;
        -:   23:
        1:   24:	check_functions(initializeGame(playerNum, cards, ramdomSeed, &game));
        1:   25:	int theplayer = whoseTurn(&game);
        -:   26:
        1:   27:	temp1 = game.handCount[theplayer];
        1:   28:	temp3 = game.deckCount[theplayer];
        -:   29:
        1:   30:	check_functions(cardEffect(adventurer, 0, 0, 0, &game, 0, 0));
        1:   31:	temp2 = game.handCount[theplayer];
        1:   32:	temp4 = game.deckCount[theplayer];
        -:   33:
        1:   34:	check_equal(temp1, temp2);
        1:   35:	check_equal(temp3, temp4);
        -:   36:
    #####:   37:	printf("TEST SUCCESSFULLY COMPLETED\n");
    #####:   38:	return 0;
        -:   39:}
