        -:    0:Source:../dominion.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
      180:    9:int compare(const void* a, const void* b) {
      180:   10:  if (*(int*)a > *(int*)b)
    #####:   11:    return 1;
      180:   12:  if (*(int*)a < *(int*)b)
       48:   13:    return -1;
      132:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        3:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
        3:   45:  SelectStream(1);
        -:   46:    ((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
        3:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        3:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
       33:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
      330:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
      300:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
        3:   74:  if (numPlayers == 2)
        -:   75:    {
    #####:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
        3:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
        3:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        3:   88:  if (numPlayers == 2)
        -:   89:    {
    #####:   90:      state->supplyCount[estate] = 8;
    #####:   91:      state->supplyCount[duchy] = 8;
    #####:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
        3:   96:      state->supplyCount[estate] = 12;
        3:   97:      state->supplyCount[duchy] = 12;
        3:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        3:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  103:  state->supplyCount[silver] = 40;
        3:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
       63:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
      552:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
      516:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
       24:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
        6:  116:		  if (numPlayers == 2){ 
    #####:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
        3:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
       21:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
       24:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
      492:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       15:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
       12:  141:      state->deckCount[i] = 0;
       48:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
       36:  144:	  state->deck[i][j] = estate;
       36:  145:	  state->deckCount[i]++;
        -:  146:	}
       96:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
       84:  149:	  state->deck[i][j] = copper;
       84:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       15:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       12:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
       15:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       12:  167:      state->handCount[i] = 0;
       12:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
       84:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
       81:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        3:  183:  state->outpostPlayed = 0;
        3:  184:  state->phase = 0;
        3:  185:  state->numActions = 1;
        3:  186:  state->numBuys = 1;
        3:  187:  state->playedCardCount = 0;
        3:  188:  state->whoseTurn = 0;
        3:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
       18:  193:  for (it = 0; it < 5; it++){
       15:  194:    drawCard(state->whoseTurn, state);
        -:  195:  }
        -:  196:
        3:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
        3:  199:  return 0;
        -:  200:}
        -:  201:
       12:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       12:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       12:  210:  if (state->deckCount[player] < 1)
    #####:  211:    return -1;
       12:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
      144:  215:  while (state->deckCount[player] > 0) {
      120:  216:    card = floor(Random() * state->deckCount[player]);
      120:  217:    newDeck[newDeckPos] = state->deck[player][card];
      120:  218:    newDeckPos++;
      366:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
      246:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
      120:  222:    state->deckCount[player]--;
        -:  223:  }
      132:  224:  for (i = 0; i < newDeckPos; i++) {
      120:  225:    state->deck[player][i] = newDeck[i];
      120:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
       12:  229:  return 0;
        -:  230:}
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
    #####:  270:  return 0;
        -:  271:}
        -:  272:
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
    #####:  309:  return 0;
        -:  310:}
        -:  311:
    #####:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
    #####:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
    #####:  321:int supplyCount(int card, struct gameState *state) {
    #####:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
        6:  347:int whoseTurn(struct gameState *state) {
        6:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
    #####:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
    #####:  407:	  j++;
        -:  408:	}
        -:  409:    }
    #####:  410:  if ( j >= 3)
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
        -:  416:}
        -:  417:
    #####:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
       17:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
       17:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    #####:  534:    for (i = 0; i < state->discardCount[player];i++){
    #####:  535:      state->deck[player][i] = state->discard[player][i];
    #####:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
    #####:  539:    state->deckCount[player] = state->discardCount[player];
    #####:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
    #####:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
    #####:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
    #####:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
    #####:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
    #####:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
    #####:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  564:    state->deckCount[player]--;
    #####:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
       17:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
       17:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
       17:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       17:  577:    state->deckCount[player]--;
       17:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
       17:  581:  return 0;
        -:  582:}
        -:  583:
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
        -:  647://*****Added following 5 functions correspond to 5 cards in cardEffect() function
    #####:  648:int card_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int *temphand, int z){
    #####:  649:  while(drawntreasure<2){
    #####:  650:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  651:      shuffle(currentPlayer, state);
        -:  652:    }
    #####:  653:    drawCard(currentPlayer, state);
    #####:  654:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card. //1
    #####:  655:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  656:      drawntreasure++;
        -:  657:    else{
    #####:  658:      temphand[z]=cardDrawn;
    #####:  659:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  660:      z++;
        -:  661:    }
        -:  662:  }
        -:  663:
    #####:  664:  while(z-1>=0){
    #####:  665:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  666:    //2
    #####:  667:	break;
        -:  668:  }
        -:  669:
    #####:  670:  return 0;
        -:  671:}
    #####:  672:int card_council_room(struct gameState *state, int currentPlayer, int handPos){
        -:  673:  int i;
        -:  674:  //+4 Cards
    #####:  675:  for (i = 0; i < 4; i++){
    #####:  676:    drawCard(currentPlayer, state);
        -:  677:  }
        -:  678:    
        -:  679:  //+1 Buy
    #####:  680:  state->numBuys++;
        -:  681:    
        -:  682:  //Each other player draws a card
    #####:  683:  for (i = 0; i < state->numPlayers; i++){
    #####:  684:    if ( i != currentPlayer ){
    #####:  685:       drawCard(i, state);
        -:  686:    }
        -:  687:  } 
        -:  688:  //put played card in played card pile
    #####:  689:  discardCard(handPos, currentPlayer, state, 0);
        -:  690:    
    #####:  691:  return 0;
        -:  692:}
    #####:  693:int card_remodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos){
        -:  694:  int i;
        -:  695:  int j;
        -:  696:
    #####:  697:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  698:
    #####:  699:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  700:  {
    #####:  701:    return -1;
        -:  702:  }
        -:  703:
    #####:  704:  gainCard(choice2, state, 0, currentPlayer);
        -:  705:
        -:  706:  //discard card from hand
    #####:  707:  discardCard(handPos, currentPlayer, state, 0);
        -:  708:
        -:  709:  //discard trashed card
    #####:  710:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  711:  {
    #####:  712:    if (state->hand[currentPlayer][i] == j)
        -:  713:    {
    #####:  714:      discardCard(i, currentPlayer, state, 0);      
    #####:  715:      break;
        -:  716:    }
        -:  717:  }
    #####:  718:  return 0;
        -:  719:}
    #####:  720:int card_smithy(struct gameState *state, int handPos, int currentPlayer){
        -:  721:  int i;
        -:  722:
        -:  723:  //+3 Cards
    #####:  724:  for (i = 0; i < 3; i++)
        -:  725:  {
    #####:  726:    drawCard(currentPlayer, state);
        -:  727:  }
        -:  728:
        -:  729:  //discard card from hand
    #####:  730:  discardCard(handPos, currentPlayer, state, 0);
    #####:  731:  return 0;
        -:  732:}
    #####:  733:int card_village(struct gameState *state, int handPos, int currentPlayer){
    #####:  734:  drawCard(currentPlayer, state); //+1 Card
        -:  735:  
        -:  736:  //+2 Actions
    #####:  737:  state->numActions = state->numActions + 2;
        -:  738:  
        -:  739:  //discard played card from hand
    #####:  740:  discardCard(handPos, currentPlayer, state, 0);
    #####:  741:  return 0;
        -:  742:}
        -:  743:
        3:  744:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  745:{
        -:  746:  int i;
        -:  747:  int j;
        -:  748:  int k;
        -:  749:  int x;
        -:  750:  int index;
        3:  751:  int currentPlayer = whoseTurn(state);
        3:  752:  int nextPlayer = currentPlayer + 1;
        -:  753:
        3:  754:  int tributeRevealedCards[2] = {-1, -1};
        -:  755:  int temphand[MAX_HAND];// moved above the if statement
        3:  756:  int drawntreasure=0;
        -:  757:  int cardDrawn;
        3:  758:  int z = 0;// this is the counter for the temp hand
        3:  759:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  760:    nextPlayer = 0;
        -:  761:  }
        -:  762:  
        -:  763:  //uses switch to select card and perform actions
        3:  764:  switch( card ) 
        -:  765:    {
        -:  766:    case adventurer:          
    #####:  767:      card_adventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);     //****************I CHANGED THIS *****************
        -:  768:			
        -:  769:    case council_room:
    #####:  770:      card_council_room(state, currentPlayer, handPos);   //****************I CHANGED THIS *****************
        -:  771:			
        -:  772:    case feast:
        -:  773:      //gain card with cost up to 5
        -:  774:      //Backup hand
    #####:  775:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  776:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  777:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  778:      }
        -:  779:      //Backup hand
        -:  780:
        -:  781:      //Update Coins for Buy
    #####:  782:      updateCoins(currentPlayer, state, 5);
    #####:  783:      x = 1;//Condition to loop on
    #####:  784:      while( x == 1) {//Buy one card
    #####:  785:	if (supplyCount(choice1, state) <= 0){
        -:  786:	  if (DEBUG)
        -:  787:	    printf("None of that card left, sorry!\n");
        -:  788:
        -:  789:	  if (DEBUG){
        -:  790:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  791:	  }
        -:  792:	}
    #####:  793:	else if (state->coins < getCost(choice1)){
    #####:  794:	  printf("That card is too expensive!\n");
        -:  795:
        -:  796:	  if (DEBUG){
        -:  797:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  798:	  }
        -:  799:	}
        -:  800:	else{
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  804:	  }
        -:  805:
    #####:  806:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  807:	  x = 0;//No more buying cards
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  811:	  }
        -:  812:
        -:  813:	}
        -:  814:      }     
        -:  815:
        -:  816:      //Reset Hand
    #####:  817:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  818:	state->hand[currentPlayer][i] = temphand[i];
    #####:  819:	temphand[i] = -1;
        -:  820:      }
        -:  821:      //Reset Hand
        -:  822:      			
    #####:  823:      return 0;
        -:  824:			
        -:  825:    case gardens:
    #####:  826:      return -1;
        -:  827:			
        -:  828:    case mine:
    #####:  829:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  830:
    #####:  831:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  832:	{
    #####:  833:	  return -1;
        -:  834:	}
        -:  835:		
    #####:  836:      if (choice2 > treasure_map || choice2 < curse)
        -:  837:	{
    #####:  838:	  return -1;
        -:  839:	}
        -:  840:
    #####:  841:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  842:	{
    #####:  843:	  return -1;
        -:  844:	}
        -:  845:
    #####:  846:      gainCard(choice2, state, 2, currentPlayer);
        -:  847:
        -:  848:      //discard card from hand
    #####:  849:      discardCard(handPos, currentPlayer, state, 0);
        -:  850:
        -:  851:      //discard trashed card
    #####:  852:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  853:	{
    #####:  854:	  if (state->hand[currentPlayer][i] == j)
        -:  855:	    {
    #####:  856:	      discardCard(i, currentPlayer, state, 0);			
    #####:  857:	      break;
        -:  858:	    }
        -:  859:	}
        -:  860:			
    #####:  861:      return 0;
        -:  862:			
        -:  863:    case remodel:
    #####:  864:        card_remodel(state, currentPlayer, choice1, choice2, handPos);    //****************I CHANGED THIS *****************
        -:  865:		
        -:  866:    case smithy:
    #####:  867:        card_smithy(state, handPos, currentPlayer);    //****************I CHANGED THIS *****************
        -:  868:      
        -:  869:    case village:
    #####:  870:        card_village(state, currentPlayer, handPos);    //****************I CHANGED THIS *****************
        -:  871:
        -:  872:    case baron:
    #####:  873:      state->numBuys++;//Increase buys by 1!
    #####:  874:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  875:	int p = 0;//Iterator for hand!
    #####:  876:	int card_not_discarded = 1;//Flag for discard set!
    #####:  877:	while(card_not_discarded){
    #####:  878:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  879:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  880:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  881:	    state->discardCount[currentPlayer]++;
    #####:  882:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  883:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  884:	    }
    #####:  885:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  886:	    state->handCount[currentPlayer]--;
    #####:  887:	    card_not_discarded = 0;//Exit the loop
        -:  888:	  }
    #####:  889:	  else if (p > state->handCount[currentPlayer]){
        -:  890:	    if(DEBUG) {
        -:  891:	      printf("No estate cards in your hand, invalid choice\n");
        -:  892:	      printf("Must gain an estate if there are any\n");
        -:  893:	    }
    #####:  894:	    if (supplyCount(estate, state) > 0){
    #####:  895:	      gainCard(estate, state, 0, currentPlayer);
    #####:  896:	      state->supplyCount[estate]--;//Decrement estates
    #####:  897:	      if (supplyCount(estate, state) == 0){
    #####:  898:		isGameOver(state);
        -:  899:	      }
        -:  900:	    }
    #####:  901:	    card_not_discarded = 0;//Exit the loop
        -:  902:	  }
        -:  903:			    
        -:  904:	  else{
    #####:  905:	    p++;//Next card
        -:  906:	  }
        -:  907:	}
        -:  908:      }
        -:  909:			    
        -:  910:      else{
    #####:  911:	if (supplyCount(estate, state) > 0){
    #####:  912:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  913:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  914:	  if (supplyCount(estate, state) == 0){
    #####:  915:	    isGameOver(state);
        -:  916:	  }
        -:  917:	}
        -:  918:      }
        -:  919:	    
        -:  920:      
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case great_hall:
        -:  924:      //+1 Card
    #####:  925:      drawCard(currentPlayer, state);
        -:  926:			
        -:  927:      //+1 Actions
    #####:  928:      state->numActions++;
        -:  929:			
        -:  930:      //discard card from hand
    #####:  931:      discardCard(handPos, currentPlayer, state, 0);
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case minion:
        -:  935:      //+1 action
    #####:  936:      state->numActions++;
        -:  937:			
        -:  938:      //discard card from hand
    #####:  939:      discardCard(handPos, currentPlayer, state, 0);
        -:  940:			
    #####:  941:      if (choice1)		//+2 coins
        -:  942:	{
    #####:  943:	  state->coins = state->coins + 2;
        -:  944:	}
        -:  945:			
    #####:  946:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  947:	{
        -:  948:	  //discard hand
    #####:  949:	  while(numHandCards(state) > 0)
        -:  950:	    {
    #####:  951:	      discardCard(handPos, currentPlayer, state, 0);
        -:  952:	    }
        -:  953:				
        -:  954:	  //draw 4
    #####:  955:	  for (i = 0; i < 4; i++)
        -:  956:	    {
    #####:  957:	      drawCard(currentPlayer, state);
        -:  958:	    }
        -:  959:				
        -:  960:	  //other players discard hand and redraw if hand size > 4
    #####:  961:	  for (i = 0; i < state->numPlayers; i++)
        -:  962:	    {
    #####:  963:	      if (i != currentPlayer)
        -:  964:		{
    #####:  965:		  if ( state->handCount[i] > 4 )
        -:  966:		    {
        -:  967:		      //discard hand
    #####:  968:		      while( state->handCount[i] > 0 )
        -:  969:			{
    #####:  970:			  discardCard(handPos, i, state, 0);
        -:  971:			}
        -:  972:							
        -:  973:		      //draw 4
    #####:  974:		      for (j = 0; j < 4; j++)
        -:  975:			{
    #####:  976:			  drawCard(i, state);
        -:  977:			}
        -:  978:		    }
        -:  979:		}
        -:  980:	    }
        -:  981:				
        -:  982:	}
    #####:  983:      return 0;
        -:  984:		
        -:  985:    case steward:
        3:  986:      if (choice1 == 1)
        -:  987:	{
        -:  988:	  //+2 cards
        1:  989:	  drawCard(currentPlayer, state);
        1:  990:	  drawCard(currentPlayer, state);
        -:  991:	}
        2:  992:      else if (choice1 == 2)
        -:  993:	{
        -:  994:	  //+2 coins
        1:  995:	  state->coins = state->coins + 2;
        -:  996:	}
        -:  997:      else
        -:  998:	{
        -:  999:	  //trash 2 cards in hand
        1: 1000:	  discardCard(choice2, currentPlayer, state, 1);
        1: 1001:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1002:	}
        -: 1003:			
        -: 1004:      //discard card from hand
        3: 1005:      discardCard(handPos, currentPlayer, state, 0);
        3: 1006:      return 0;
        -: 1007:		
        -: 1008:    case tribute:
    #####: 1009:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1010:	if (state->deckCount[nextPlayer] > 0){
    #####: 1011:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1012:	  state->deckCount[nextPlayer]--;
        -: 1013:	}
    #####: 1014:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1015:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1016:	  state->discardCount[nextPlayer]--;
        -: 1017:	}
        -: 1018:	else{
        -: 1019:	  //No Card to Reveal
        -: 1020:	  if (DEBUG){
        -: 1021:	    printf("No cards to reveal\n");
        -: 1022:	  }
        -: 1023:	}
        -: 1024:      }
        -: 1025:	    
        -: 1026:      else{
    #####: 1027:	if (state->deckCount[nextPlayer] == 0){
    #####: 1028:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1029:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1030:	    state->deckCount[nextPlayer]++;
    #####: 1031:	    state->discard[nextPlayer][i] = -1;
    #####: 1032:	    state->discardCount[nextPlayer]--;
        -: 1033:	  }
        -: 1034:			    
    #####: 1035:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1036:	} 
    #####: 1037:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1038:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1039:	state->deckCount[nextPlayer]--;
    #####: 1040:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1041:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1042:	state->deckCount[nextPlayer]--;
        -: 1043:      }    
        -: 1044:		       
    #####: 1045:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1046:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1047:	state->playedCardCount++;
    #####: 1048:	tributeRevealedCards[1] = -1;
        -: 1049:      }
        -: 1050:
    #####: 1051:      for (i = 0; i <= 2; i ++){
    #####: 1052:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1053:	  state->coins += 2;
        -: 1054:	}
        -: 1055:		    
    #####: 1056:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1057:	  drawCard(currentPlayer, state);
    #####: 1058:	  drawCard(currentPlayer, state);
        -: 1059:	}
        -: 1060:	else{//Action Card
    #####: 1061:	  state->numActions = state->numActions + 2;
        -: 1062:	}
        -: 1063:      }
        -: 1064:	    
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case ambassador:
    #####: 1068:      j = 0;		//used to check if player has enough cards to discard
        -: 1069:
    #####: 1070:      if (choice2 > 2 || choice2 < 0)
        -: 1071:	{
    #####: 1072:	  return -1;				
        -: 1073:	}
        -: 1074:
    #####: 1075:      if (choice1 == handPos)
        -: 1076:	{
    #####: 1077:	  return -1;
        -: 1078:	}
        -: 1079:
    #####: 1080:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1081:	{
    #####: 1082:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1083:	    {
    #####: 1084:	      j++;
        -: 1085:	    }
        -: 1086:	}
    #####: 1087:      if (j < choice2)
        -: 1088:	{
    #####: 1089:	  return -1;				
        -: 1090:	}
        -: 1091:
        -: 1092:      if (DEBUG) 
        -: 1093:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1094:
        -: 1095:      //increase supply count for choosen card by amount being discarded
    #####: 1096:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1097:			
        -: 1098:      //each other player gains a copy of revealed card
    #####: 1099:      for (i = 0; i < state->numPlayers; i++)
        -: 1100:	{
    #####: 1101:	  if (i != currentPlayer)
        -: 1102:	    {
    #####: 1103:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1104:	    }
        -: 1105:	}
        -: 1106:
        -: 1107:      //discard played card from hand
    #####: 1108:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1109:
        -: 1110:      //trash copies of cards returned to supply
    #####: 1111:      for (j = 0; j < choice2; j++)
        -: 1112:	{
    #####: 1113:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1114:	    {
    #####: 1115:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1116:		{
    #####: 1117:		  discardCard(i, currentPlayer, state, 1);
    #####: 1118:		  break;
        -: 1119:		}
        -: 1120:	    }
        -: 1121:	}			
        -: 1122:
    #####: 1123:      return 0;
        -: 1124:		
        -: 1125:    case cutpurse:
        -: 1126:
    #####: 1127:      updateCoins(currentPlayer, state, 2);
    #####: 1128:      for (i = 0; i < state->numPlayers; i++)
        -: 1129:	{
    #####: 1130:	  if (i != currentPlayer)
        -: 1131:	    {
    #####: 1132:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1133:		{
    #####: 1134:		  if (state->hand[i][j] == copper)
        -: 1135:		    {
    #####: 1136:		      discardCard(j, i, state, 0);
    #####: 1137:		      break;
        -: 1138:		    }
    #####: 1139:		  if (j == state->handCount[i])
        -: 1140:		    {
    #####: 1141:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1142:			{
        -: 1143:			  if (DEBUG)
        -: 1144:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1145:			}	
    #####: 1146:		      break;
        -: 1147:		    }		
        -: 1148:		}
        -: 1149:					
        -: 1150:	    }
        -: 1151:				
        -: 1152:	}				
        -: 1153:
        -: 1154:      //discard played card from hand
    #####: 1155:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1156:
    #####: 1157:      return 0;
        -: 1158:
        -: 1159:		
        -: 1160:    case embargo: 
        -: 1161:      //+2 Coins
    #####: 1162:      state->coins = state->coins + 2;
        -: 1163:			
        -: 1164:      //see if selected pile is in play
    #####: 1165:      if ( state->supplyCount[choice1] == -1 )
        -: 1166:	{
    #####: 1167:	  return -1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //add embargo token to selected supply pile
    #####: 1171:      state->embargoTokens[choice1]++;
        -: 1172:			
        -: 1173:      //trash card
    #####: 1174:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1175:      return 0;
        -: 1176:		
        -: 1177:    case outpost:
        -: 1178:      //set outpost flag
    #####: 1179:      state->outpostPlayed++;
        -: 1180:			
        -: 1181:      //discard card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case salvager:
        -: 1186:      //+1 buy
    #####: 1187:      state->numBuys++;
        -: 1188:			
    #####: 1189:      if (choice1)
        -: 1190:	{
        -: 1191:	  //gain coins equal to trashed card
    #####: 1192:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1193:	  //trash card
    #####: 1194:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1195:	}
        -: 1196:			
        -: 1197:      //discard card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case sea_hag:
    #####: 1202:      for (i = 0; i < state->numPlayers; i++){
    #####: 1203:	if (i != currentPlayer){
    #####: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1205:	  state->discardCount[i]++;
    #####: 1206:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1207:	}
        -: 1208:      }
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case treasure_map:
        -: 1212:      //search hand for another treasure_map
    #####: 1213:      index = -1;
    #####: 1214:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1215:	{
    #####: 1216:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1217:	    {
    #####: 1218:	      index = i;
    #####: 1219:	      break;
        -: 1220:	    }
        -: 1221:	}
    #####: 1222:      if (index > -1)
        -: 1223:	{
        -: 1224:	  //trash both treasure cards
    #####: 1225:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1226:	  discardCard(index, currentPlayer, state, 1);
        -: 1227:
        -: 1228:	  //gain 4 Gold cards
    #####: 1229:	  for (i = 0; i < 4; i++)
        -: 1230:	    {
    #####: 1231:	      gainCard(gold, state, 1, currentPlayer);
        -: 1232:	    }
        -: 1233:				
        -: 1234:	  //return success
    #####: 1235:	  return 1;
        -: 1236:	}
        -: 1237:			
        -: 1238:      //no second treasure_map found in hand
    #####: 1239:      return -1;
        -: 1240:    }
        -: 1241:	
    #####: 1242:  return -1;
        -: 1243:}
        -: 1244:
        5: 1245:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1246:{
        -: 1247:	
        -: 1248:  //if card is not trashed, added to Played pile 
        5: 1249:  if (trashFlag < 1)
        -: 1250:    {
        -: 1251:      //add card to played pile
        3: 1252:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1253:      state->playedCardCount++;
        -: 1254:    }
        -: 1255:	
        -: 1256:  //set played card to -1
        5: 1257:  state->hand[currentPlayer][handPos] = -1;
        -: 1258:	
        -: 1259:  //remove card from player's hand
        5: 1260:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1261:    {
        -: 1262:      //reduce number of cards in hand
    #####: 1263:      state->handCount[currentPlayer]--;
        -: 1264:    }
        5: 1265:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
        -: 1269:    }
        -: 1270:  else 	
        -: 1271:    {
        -: 1272:      //replace discarded card with last card in hand
        5: 1273:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1274:      //set last card to -1
        5: 1275:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1276:      //reduce number of cards in hand
        5: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:	
        5: 1280:  return 0;
        -: 1281:}
        -: 1282:
    #####: 1283:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1284:{
        -: 1285:  //Note: supplyPos is enum of choosen card
        -: 1286:	
        -: 1287:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1288:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1289:    {
    #####: 1290:      return -1;
        -: 1291:    }
        -: 1292:	
        -: 1293:  //added card for [whoseTurn] current player:
        -: 1294:  // toFlag = 0 : add to discard
        -: 1295:  // toFlag = 1 : add to deck
        -: 1296:  // toFlag = 2 : add to hand
        -: 1297:
    #####: 1298:  if (toFlag == 1)
        -: 1299:    {
    #####: 1300:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1301:      state->deckCount[player]++;
        -: 1302:    }
    #####: 1303:  else if (toFlag == 2)
        -: 1304:    {
    #####: 1305:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1306:      state->handCount[player]++;
        -: 1307:    }
        -: 1308:  else
        -: 1309:    {
    #####: 1310:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1311:      state->discardCount[player]++;
        -: 1312:    }
        -: 1313:	
        -: 1314:  //decrease number in supply pile
    #####: 1315:  state->supplyCount[supplyPos]--;
        -: 1316:	 
    #####: 1317:  return 0;
        -: 1318:}
        -: 1319:
        3: 1320:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1321:{
        -: 1322:  int i;
        -: 1323:	
        -: 1324:  //reset coin count
        3: 1325:  state->coins = 0;
        -: 1326:
        -: 1327:  //add coins for each Treasure card in player's hand
       18: 1328:  for (i = 0; i < state->handCount[player]; i++)
        -: 1329:    {
       15: 1330:      if (state->hand[player][i] == copper)
        -: 1331:	{
       11: 1332:	  state->coins += 1;
        -: 1333:	}
        4: 1334:      else if (state->hand[player][i] == silver)
        -: 1335:	{
    #####: 1336:	  state->coins += 2;
        -: 1337:	}
        4: 1338:      else if (state->hand[player][i] == gold)
        -: 1339:	{
    #####: 1340:	  state->coins += 3;
        -: 1341:	}	
        -: 1342:    }	
        -: 1343:
        -: 1344:  //add bonus
        3: 1345:  state->coins += bonus;
        -: 1346:
        3: 1347:  return 0;
        -: 1348:}
        -: 1349:
        -: 1350:
        -: 1351://end of dominion.c
        -: 1352:
