        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "../dominion.c"
        -:    2:#include "../rngs.c"
        -:    3:#include "../myassert.h"
        -:    4:
        -:    5:/*************************************
        -:    6:Test for "isGameOver()" function
        -:    7:*************************************/
        -:    8:
        1:    9:int main(){
        -:   10:
        -:   11://	Test Initialization
        1:   12:	int i, temp, coin_result=0;
        1:   13:	srand (time(NULL));
        -:   14:	struct gameState game;
        1:   15:	int cards[10] = {estate, duchy, adventurer, embargo, sea_hag, feast, gardens, mine, tribute, outpost}; 
        1:   16:	int playerNum = 4;
        1:   17:	int theplayer = 2;
        -:   18:
        -:   19:// Random settings
        1:   20:	int ramdomSeed = rand() % 99999 + 1;	
        1:   21:	int bonus = rand() % 10;
        1:   22:	int handNum = rand() % MAX_HAND;
        -:   23:	//initializeGame(playerNum, cards, ramdomSeed, &game);
        -:   24:
        -:   25:
        1:   26:	check_functions(initializeGame(playerNum, cards, ramdomSeed, &game));
        1:   27:	check_functions(isGameOver(&game));
        -:   28:
        -:   29:	// should return 0
        1:   30:	temp = isGameOver(&game);		
        1:   31:	check_equal(temp, 0);
        -:   32:
        -:   33:	//should return 1 since stack of Province cards is empty
        1:   34:	game.supplyCount[province] = 0;
        1:   35:	temp = isGameOver(&game);		
        1:   36:	check_equal(temp, 1);
        -:   37:
        -:   38:	// should return 0 since three supply pile are at 0, which the game ends
        1:   39:	game.supplyCount[province] = 12;
        1:   40:	game.supplyCount[estate] = 0;
        1:   41:	game.supplyCount[adventurer] = 0;
        1:   42:	game.supplyCount[embargo] = 0;
        1:   43:	temp = isGameOver(&game);		
        1:   44:	check_equal(temp, 1);
        -:   45:
        -:   46:	// should return 0 since NOT three supply pile are at 0, which the game ends
        1:   47:	game.supplyCount[estate] = 1;
        1:   48:	game.supplyCount[adventurer] = 0;
        1:   49:	game.supplyCount[embargo] = 0;
        1:   50:	temp = isGameOver(&game);		
        1:   51:	check_equal(temp, 0);
        -:   52:
        1:   53:	printf("TEST SUCCESSFULLY COMPLETED\n");
        1:   54:	return 0;
        -:   55:}
