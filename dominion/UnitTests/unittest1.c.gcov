        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "../dominion.c"
        -:    2:#include "../rngs.c"
        -:    3:#include "../myassert.h"
        -:    4:
        -:    5:/*************************************
        -:    6:Test for "updateCoins()" function
        -:    7:*************************************/
        -:    8:
        1:    9:int main(){
        -:   10:
        -:   11://	Test Initialization
        1:   12:	int i, temp, coin_result=0;
        1:   13:	srand (time(NULL));
        -:   14:	struct gameState game;
        1:   15:	int cards[10] = {estate, duchy, adventurer, embargo, sea_hag, feast, gardens, mine, tribute, outpost}; 
        1:   16:	int playerNum = 4;
        1:   17:	int theplayer = 2;
        -:   18:
        -:   19:// Random settings
        1:   20:	int ramdomSeed = rand() % 99999 + 1;	
        1:   21:	int bonus = rand() % 10;
        1:   22:	int handNum = rand() % MAX_HAND;
        -:   23:	//initializeGame(playerNum, cards, ramdomSeed, &game);
        -:   24:
        1:   25:	check_functions(initializeGame(playerNum, cards, ramdomSeed, &game));
        -:   26:
        1:   27:	game.handCount[theplayer] = handNum;	// set a random hand number to selected player
        -:   28:
      198:   29:	for(i = 0; i < handNum; i++){ 
      197:   30:		temp = rand() % 4;
      197:   31:		if(temp == 0){
       51:   32:			game.hand[theplayer][i] = copper;
       51:   33:			coin_result += 1;
      146:   34:		}else if(temp == 1){
       54:   35:			game.hand[theplayer][i] = silver;
       54:   36:			coin_result += 2;
       92:   37:		}else if(temp == 2){
       51:   38:			game.hand[theplayer][i] = gold;
       51:   39:			coin_result += 3;
        -:   40:		}else
       41:   41:			game.hand[theplayer][i] = 0;
        -:   42:	}
        -:   43://  Test functions
        -:   44:
        1:   45:	check_functions(updateCoins(theplayer, &game, bonus));
        -:   46:
        1:   47:	check_equal(game.coins, bonus + coin_result);
        -:   48:
        1:   49:	printf("TEST SUCCESSFULLY COMPLETED\n");
        1:   50:	return 0;
        -:   51:}
